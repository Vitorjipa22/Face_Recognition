# -*- coding: utf-8 -*-
"""embedds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DE42DbHTgAxkR0ihcKDiaA66Xf-23wiu

## imports
"""

import tensorflow as tf
import math
import numpy as np
import pandas as pd

from mtcnn import MTCNN
from PIL import Image
from IPython.display import Image as IMG
from os import listdir


def extrair_face(arquivo, size = (160,160), face = True, box = None):
        detector = MTCNN()
        try:
            img = Image.open(arquivo)
            img = img.convert('RGB')
        except:
            img = arquivo

        array = np.asarray(img)

        results = detector.detect_faces(array)

        x1, y1, width, height = results[0]['box']
        x2, y2 = x1 + width, y1 + height

        face = array[y1:y2, x1:x2]

        image = Image.fromarray(face)
        image = image.resize(size)
        face_array = np.asarray(image)

        return face_array

def get_embedding(facenet, face):
    face_pixels = face.astype('float32')/255

    face_pixels = face_pixels.astype('float32')

    mean, std = face_pixels.mean(), face_pixels.std()
    face_pixels = (face_pixels - mean)/std
    
    samples = np.expand_dims(face_pixels, axis=0)
    
    yhat = facenet.predict(samples)
    
    return yhat[0]

def load_fotos(path_dir, model):
    embedds = list()
    pessoas = list()
    
    directory_scr = path_dir
    
    for folder in listdir(directory_scr):
        for filename in listdir(directory_scr + '\\' +  folder):
            pessoas.append(folder)
            path = directory_scr + '\\' +  folder + '\\' + filename

            try:
                face = extrair_face(path)
                embedd = get_embedding(model, face)

            except:
                print(f"\nerror na imagem {path}")
    
            embedds.append(embedd)
    return np.array(embedds), pessoas

def save_embedds(model):
    embs, pessoas = load_fotos('fotos', model)
    embs = pd.DataFrame(embs)
    embs['pessoa'] = pessoas
    embs.to_csv("embedds.csv", encoding = 'utf-8')

def distance(encod, encod2):
    return np.linalg.norm(encod-encod2)

if __name__ == "__main__":
    model = tf.keras.models.load_model('models/facenet_keras.h5')
    model.summary()


    save_embedds(model)

